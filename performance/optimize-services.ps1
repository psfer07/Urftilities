# File originally created by psfer07

if (!([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
	Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
	exit 1
}

Import-Module -DisableNameChecking "$PSScriptRoot\..\modules\titles.psm1"

Write-Step "Improving performance"
Write-Host "--> Optimizing Windows services..."
$services = @{
	Manual                = @(
		"ALG"
		"AppIDSvc"
		"AppMgmt"
		"AppReadiness"
		"AppXSvc"
		"Appinfo"
		"AxInstSV"
		"BDESVC"
		"BTAGService"
		"BcastDVRUserService_*"
		"BluetoothUserService_*"
		"Browser"
		"CDPSvc"
		"COMSysApp"
		"CaptureService_*"
		"CertPropSvc"
		"ClipSVC"
		"ConsentUxUserSvc_*"
		"CredentialEnrollmentManagerUserSvc_*"
		"CscService"
		"DcpSvc"
		"DevQueryBroker"
		"DeviceAssociationBrokerSvc_*"
		"DeviceAssociationService"
		"DeviceInstall"
		"DevicePickerUserSvc_*"
		"DevicesFlowUserSvc_*"
		"DisplayEnhancementService"
		"DmEnrollmentSvc"
		"DsSvc"
		"DsmSvc"
		"EFS"
		"EapHost"
		"EntAppSvc"
		"FDResPub"
		"Fax"
		"FrameServer"
		"FrameServerMonitor"
		"GraphicsPerfSvc"
		"HomeGroupListener"
		"HomeGroupProvider"
		"HvHost"
		"IEEtwCollectorService"
		"IKEEXT"
		"InstallService"
		"InventorySvc"
		"IpxlatCfgSvc"
		"KtmRm"
		"LicenseManager"
		"LxpSvc"
		"MSDTC"
		"MSiSCSI"
		"McpManagementService"
		"MessagingService_*"
		"MicrosoftEdgeElevationService"
		"MixedRealityOpenXRSvc"
		"MsKeyboardFilter"
		"NPSMSvc_*"
		"NaturalAuthentication"
		"NcaSvc"
		"NcbService"
		"NcdAutoSetup"
		"NetSetupSvc"
		"Netman"
		"NgcCtnrSvc"
		"NgcSvc"
		"NlaSvc"
		"P9RdrService_*"
		"PNRPAutoReg"
		"PNRPsvc"
		"PcaSvc"
		"PeerDistSvc"
		"PenService_*"
		"PerfHost"
		"PhoneSvc"
		"PimIndexMaintenanceSvc_*"
		"PlugPlay"
		"PolicyAgent"
		"PrintNotify"
		"PrintWorkflowUserSvc_*"
		"PushToInstall"
		"QWAVE"
		"RasAuto"
		"RasMan"
		"RetailDemo"
		"RmSvc"
		"RpcLocator"
		"SCPolicySvc"
		"SCardSvr"
		"SDRSVC"
		"SEMgrSvc"
		"SNMPTRAP"
		"SNMPTrap"
		"SSDPSRV"
		"ScDeviceEnum"
		"SecurityHealthService"
		"Sense"
		"SensorDataService"
		"SensorService"
		"SensrSvc"
		"SessionEnv"
		"SharedAccess"
		"SharedRealitySvc"
		"SmsRouter"
		"SstpSvc"
		"StateRepository"
		"StiSvc"
		"StorSvc"
		"TabletInputService"
		"TapiSrv"
		"TextInputManagementService"
		"TieringEngineService"
		"TimeBroker"
		"TimeBrokerSvc"
		"TrkWks"
		"UnistoreSvc_*"
		"UPnPDeviceHost"
		"UsoSvc"
		"UserDataSvc_*"
		"UserDataStorageSvc_*"
		"VacSvc"
		"VaultSvc"
		"vmicguestinterface"
		"vmicheartbeat"
		"vmickvpexchange"
		"vmicrdv"
		"vmicshutdown"
		"vmictimesync"
		"vmicvmsession"
		"vmicvss"
		"vmvss"
		"wbengine"
		"wcncsvc"
		"webthreatdefsvc"
		"wercplsupport"
		"wisvc"
		"wlidsvc"
		"wlpasvc"
		"wmiApSrv"
		"workfolderssvc"
		"wuauserv"
		"wudfsvc"
	)
	Disabled              = @(
		"AJRouter"
		"AppVClient"
		"AssignedAccessManagerSvc"
		"DiagTrack"
		"DialogBlockingService"
		"NetTcpPortSharing"
		"RemoteAccess"
		"RemoteRegistry"
		"UevAgentService"
		"shpamsvc"
		"ssh-agent"
		"tzautoupdate"
		"uhssvc"
	)
	Automatic             = @(
		"AudioEndpointBuilder"
		"AudioSrv"
		"Audiosrv"
		"BFE"
		"BrokerInfrastructure"
		"BthAvctpSvc"
		"BthHFSrv"
		"CDPUserSvc_*"
		"CoreMessagingRegistrar"
		"CryptSvc"
		"DPS"
		"DcomLaunch"
		"Dhcp"
		"DispBrokerDesktopSvc"
		"Dnscache"
		"DusmSvc"
		"EventLog"
		"EventSystem"
		"FontCache"
		"KeyIso"
		"LSM"
		"LanmanServer"
		"LanmanWorkstation"
		"MpsSvc"
		"Netlogon"
		"OneSyncSvc_*"
		"Power"
		"ProfSvc"
		"RpcEptMapper"
		"RpcSs"
		"SENS"
		"SamSs"
		"Schedule"
		"SgrmBroker"
		"ShellHWDetection"
		"Spooler"
		"SysMain"
		"SystemEventsBroker"
		"TermService"
		"Themes"
		"TrkWks"
		"UserManager"
		"VGAuthService"
		"VMTools"
		"VaultSvc"
		"Wcmsvc"
		"WinDefend"
		"Winmgmt"
		"WlanSvc"
		"WpnUserService_*"
		"gpsvc"
		"iphlpsvc"
		"mpssvc"
		"nsi"
		"tiledatamodelsvc"
		"webthreatdefusersvc_*"
	)
	AutomaticDelayedStart = @(
		"BITS"
		"DoSvc"
		"MapsBroker"
		"WSearch"
		"sppsvc"
		"wscsvc"
	)
}
foreach ($StartupType in $services.Keys) {
	foreach ($service in $services[$StartupType]) {
		if ($StartupType -eq "AutomaticDelayedStart") {
			sc.exe config $service start= delayed-auto | Out-Null
		}
		else { Set-Service -Name $service -StartupType $StartupType -ErrorAction Ignore | Out-Null }
	}
}
Write-Host "Done!"
